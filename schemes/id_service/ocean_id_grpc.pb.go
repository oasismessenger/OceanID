// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.0--rc2
// source: ocean_id.proto

package idService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OceanIDClient is the client API for OceanID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OceanIDClient interface {
	GenerateID(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*IDReply, error)
	BulkGenerateID(ctx context.Context, in *IDBulkRequest, opts ...grpc.CallOption) (*IDBulkReply, error)
}

type oceanIDClient struct {
	cc grpc.ClientConnInterface
}

func NewOceanIDClient(cc grpc.ClientConnInterface) OceanIDClient {
	return &oceanIDClient{cc}
}

func (c *oceanIDClient) GenerateID(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*IDReply, error) {
	out := new(IDReply)
	err := c.cc.Invoke(ctx, "/idService.OceanID/GenerateID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oceanIDClient) BulkGenerateID(ctx context.Context, in *IDBulkRequest, opts ...grpc.CallOption) (*IDBulkReply, error) {
	out := new(IDBulkReply)
	err := c.cc.Invoke(ctx, "/idService.OceanID/BulkGenerateID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OceanIDServer is the server API for OceanID service.
// All implementations must embed UnimplementedOceanIDServer
// for forward compatibility
type OceanIDServer interface {
	GenerateID(context.Context, *IDRequest) (*IDReply, error)
	BulkGenerateID(context.Context, *IDBulkRequest) (*IDBulkReply, error)
	mustEmbedUnimplementedOceanIDServer()
}

// UnimplementedOceanIDServer must be embedded to have forward compatible implementations.
type UnimplementedOceanIDServer struct {
}

func (UnimplementedOceanIDServer) GenerateID(context.Context, *IDRequest) (*IDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateID not implemented")
}
func (UnimplementedOceanIDServer) BulkGenerateID(context.Context, *IDBulkRequest) (*IDBulkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkGenerateID not implemented")
}
func (UnimplementedOceanIDServer) mustEmbedUnimplementedOceanIDServer() {}

// UnsafeOceanIDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OceanIDServer will
// result in compilation errors.
type UnsafeOceanIDServer interface {
	mustEmbedUnimplementedOceanIDServer()
}

func RegisterOceanIDServer(s grpc.ServiceRegistrar, srv OceanIDServer) {
	s.RegisterService(&OceanID_ServiceDesc, srv)
}

func _OceanID_GenerateID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OceanIDServer).GenerateID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idService.OceanID/GenerateID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OceanIDServer).GenerateID(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OceanID_BulkGenerateID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OceanIDServer).BulkGenerateID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idService.OceanID/BulkGenerateID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OceanIDServer).BulkGenerateID(ctx, req.(*IDBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OceanID_ServiceDesc is the grpc.ServiceDesc for OceanID service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OceanID_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idService.OceanID",
	HandlerType: (*OceanIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateID",
			Handler:    _OceanID_GenerateID_Handler,
		},
		{
			MethodName: "BulkGenerateID",
			Handler:    _OceanID_BulkGenerateID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ocean_id.proto",
}
